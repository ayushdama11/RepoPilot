// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures=["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions=[vector]
}

model User{
  id    String    @id @default(cuid())
  
  clerkId   String   @unique
  imageUrl String?
  firstName String?
  lastName String?
  emailAddress String @unique
  credits Int @default(150)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userToProjects UserToProject[]

  questionsAsked Question[]
  razorpayTransactions RazorpayTransactions[]
}

model Project{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String
  githubUrl String
  deletedAt DateTime?

  userToProjects UserToProject[]
  commits Commit[]
  sourceCodeEmbeddings SourceCodeEmbedding[]
  savedQuestion Question[]
}

model UserToProject {  
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  projectId String

  user User @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

model SourceCodeEmbedding{
  id String @id @default(cuid())

  summaryEmbedding Unsupported("vector(768)")?
  sourceCode String
  fileName String
  summary String

  projectId String
  project Project @relation(fields: [projectId], references: [id])
}

model RazorpayTransactions{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user User @relation(fields:[userId], references:[clerkId])
  credits Int
  
}

model Question{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questionAsked String
  answer String

  filesReferences Json?

  projectId String
  project Project @relation(fields:[projectId],references:[id])

  userId String
  user User @relation(fields:[userId],references:[clerkId])
}
model Commit {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String
  project Project @relation(fields: [projectId], references: [id])

  commitMessage String
  commitHash String
  commitAuthorName String
  commitAuthorAvatar String
  commitDate DateTime

  summary String
}